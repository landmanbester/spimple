[project]
name = "spimple"
version = "0.0.5"
description = "Radio astronomy image post-processing tools"
authors = [
    {name = "Landman Bester", email = "lbester@sarao.ac.za"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10, <3.13"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "omegaconf",
    "katbeam",
    "pyscilog>=0.1.2",
    "codex-africanus[complete]",
    "dask-ms[xarray]>=0.2.22",
    "reproject",
    "ray[default]",
]

[project.urls]
Homepage = "https://github.com/landmanbester/spimple"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "tbump>=6.11.0",
    "ruff>=0.8.0",
    "pre-commit>=3.0.0",
    "mypy>=1.0.0",
]

[project.scripts]
spimple-imconv = "spimple.apps.image_convolver:image_convolver"
spimple-spifit = "spimple.apps.spi_fitter:spi_fitter"
spimple-binterp = "spimple.apps.power_beam_maker:power_beam_maker"
spimple-mosaic = "spimple.apps.mosaic:mosaic"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.tbump]
github_url = "https://github.com/landmanbester/spimple"

[tool.tbump.version]
current = "0.0.5"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"
search = 'version = "{current_version}"'

[[tool.tbump.file]]
src = "spimple/__init__.py"
search = "__version__='{current_version}'"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"

[tool.ruff]
# Set the maximum line length to 88.
line-length = 88
indent-width = 4

# Assume Python 3.10+.
target-version = "py310"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",     # pycodestyle errors
    "E5",     # line too long (E501)
    "E7",
    "E9",
    "F",      # Pyflakes
    "W",      # pycodestyle warnings
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "S",      # flake8-bandit
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

ignore = [
    # Scientific computing common patterns
    "E741",    # Ambiguous variable name (common in math: i, j, k, etc.)
    "N806",    # Variable in function should be lowercase (conflicts with scientific notation)
    "N803",    # Variable in function should be lowercase (conflicts with scientific notation)
    "N816",    # Variable `x` in global scope should not be mixedCase
    "N802",    # Function name `X` should be lowercase
    "PLR2004", # Magic value used in comparison (common in scientific constants)
    "PLR0913", # Too many arguments to function call (common in scientific APIs)
    "PLR0915", # Too many statements (complex scientific algorithms)
    "C901",    # Too complex (complex scientific algorithms)
    "PLR0912", # Too many branches (complex scientific logic)

    # Performance-related ignores for scientific code
    "PERF203", # try-except within a loop (common pattern in numerical code)

    # Pandas-related ignores that conflict with scientific computing
    "PD901",   # Avoid using the generic variable name `df` for DataFrames

    # Print statements are often used for debugging in scientific workflows
    "T201",    # print found
    "T203",    # pprint found

    # Security ignores appropriate for scientific computing (not web apps)
    "S101",    # Use of assert detected (common in scientific validation)
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes

    # Imports at the top conflicts with conditional imports in scientific code
    "E402",    # Module level import not at top of file

    # Type checking imports
    "TCH001",  # Move application import into TYPE_CHECKING block
    "TCH002",  # Move third-party import into TYPE_CHECKING block
    "TCH003",  # Move standard library import into TYPE_CHECKING block

    "TRY003",   # Avoid specifying long messages outside the exception classifiers
    "EM101",    # Exception must not be a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first

]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

# Preview features for more aggressive formatting
preview = true

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "ruff>=0.12.8",
]

[tool.ruff.lint.isort]
# Scientific computing import conventions
known-first-party = ["spimple"]
known-third-party = [
    "numpy",
    "scipy",
    "matplotlib",
    "pandas",
    "astropy",
    "dask",
    "africanus",
    "katbeam",
    "omegaconf",
    "pyscilog",
    "reproject",
    "ray",
]

# Split imports by type
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
# Increase complexity threshold for scientific computing
max-complexity = 15

[tool.ruff.lint.pylint]
# Increase limits appropriate for scientific computing
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 80

[tool.ruff.lint.per-file-ignores]
# Test files can use magic numbers and have complex fixtures
"tests/*.py" = ["PLR2004", "S101", "PLR0913", "PLR0915"]
# Scripts can have more relaxed rules
"scripts/*.py" = ["T201", "PLR2004", "INP001"]
# Notebooks can have more relaxed rules
"*.ipynb" = ["T201", "E402", "F401", "PLR2004"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
disable_error_code = ["union-attr", "no-untyped-def", "assignment", "var-annotated"]
